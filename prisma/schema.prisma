// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  GuildUser     GuildUser @relation(fields: [discordUserId], references: [id])
  discordUserId String    @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --

model IssueIdMapping {
  id                 Int      @id @default(autoincrement())
  notion_page_id     String?  @unique
  notion_page_url    String?
  discord_thread_id  String?  @unique
  discord_thread_url String?
  author             String?  @db.Text
  title              String?  @db.Text
  createdAt          DateTime @default(now())
  Issue              Issue?

  @@index([notion_page_id, discord_thread_id])
}

model Logs {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  timestamp DateTime @default(now()) @db.Timestamp(0)
  level     String   @db.Text
  message   String   @db.Text
  scope     String   @db.Text
  meta      Json?
}

enum IssueStatus {
  TODO
  ASSIGNED
  DONE
  CLOSED
}

enum Platform {
  WEB
  NATIVE
  CROSS
}

model Issue {
  id               Int            @id @default(autoincrement())
  IssueMapping     IssueIdMapping @relation(fields: [issueIdMappingId], references: [id])
  issueIdMappingId Int            @unique
  title            String?        @db.Text
  description      String?        @db.Text
  author           String?        @db.Text
  status           IssueStatus    @default(TODO)
  lab              String?        @db.Text
  version          String?        @db.Text
  discordThreadId  String?        @db.Text
  type             String?        @db.Text
  stepsToReproduce String?        @db.Text
  component        String?        @db.Text
  severity         String?        @db.Text
  specs            String?        @db.Text
  codeSnippet      String?        @db.Text
  checkTechLead    Boolean?
  checkDesign      Boolean?
  scope            String?        @db.Text
  attachment       String?        @db.Text
  attachment2      String?        @db.Text
  azureWorkItem    String?        @db.Text
  platform         Platform?
  timestamp        DateTime       @default(now()) @db.Timestamp(0)
  createdAt        DateTime?
  IssuesMedia      IssuesMedia[]
  Lab              Lab?           @relation(fields: [labId], references: [id])
  Component        Component?     @relation(fields: [componentId], references: [id])
  labId            String?
  componentId      String?

  @@index([issueIdMappingId, labId])
}

model Kudos {
  id        Int        @id @default(autoincrement()) @db.UnsignedInt
  type      String
  from      GuildUser? @relation("from", fields: [fromId], references: [id])
  fromId    String?
  to        GuildUser? @relation("to", fields: [toId], references: [id])
  toId      String?
  timestamp DateTime   @default(now()) @db.Timestamp(0)

  @@index([fromId])
  @@index([toId])
}

model GuildUser {
  id           String   @id
  notionUserId Int?     @unique
  azureUserId  String?  @unique
  username     String   @db.Text
  avatarURL    String?  @db.Text
  isBot        Boolean? @default(false)
  friendlyName String?  @db.Text
  roles        String?  @db.Text
  color        String?  @db.Text
  from         Kudos[]  @relation("from")
  to           Kudos[]  @relation("to")

  DefaultLab   Lab?    @relation(fields: [defaultLabId], references: [id])
  defaultLabId String?

  notionUser            NotionUser?    @relation(fields: [notionUserId], references: [id])
  pullRequest           PullRequest[]  @relation("MinePullRequest")
  lastActionPullRequest PullRequest[]  @relation("ActionPullRequest")
  User                  User?
  LabGuildUser          LabGuildUser[]
}

model NotionUser {
  id           Int        @id
  notionUserId String     @unique
  username     String?    @db.Text
  GuildUser    GuildUser?
}

model PullRequest {
  id            Int     @id @default(autoincrement())
  pullRequestId Int     @unique
  title         String  @db.Text
  url           String  @db.Text
  lastAction    String? @db.Text

  createdAt   DateTime  @default(now()) @db.Timestamp(0)
  updatedAt   DateTime  @default(now()) @updatedAt @db.Timestamp(0)
  completedAt DateTime? @db.Timestamp(0)

  guildUser   GuildUser @relation("MinePullRequest", fields: [guildUserId], references: [id])
  guildUserId String

  lastActionGuildUser   GuildUser @relation("ActionPullRequest", fields: [lastActionGuildUserId], references: [id])
  lastActionGuildUserId String

  @@index([guildUserId])
}

model FAQ {
  id              Int      @id @default(autoincrement())
  slug            String   @unique
  label           String
  type            String?
  markdown        String   @db.LongText
  publish         Boolean  @default(false)
  sortingPriority Int?     @default(0)
  createdBy       String?
  timestamp       DateTime @default(now()) @db.Timestamp(0)
}

enum MediaType {
  ISSUE
  GENERIC
}

model Media {
  id String @id @default(cuid())

  media_id   String    @unique
  media_type MediaType
  s3_key     String    @unique

  IssuesMedia  IssuesMedia?  @relation("IssuesMediaRelation", fields: [media_id], references: [id], map: "media_issue_id", onDelete: Cascade)
  GenericMedia GenericMedia? @relation("GenericMediaRelation", fields: [media_id], references: [id], map: "media_generic_id", onDelete: Cascade)

  @@index([media_id, s3_key])
}

model IssuesMedia {
  id        String   @id @default(cuid())
  key       String
  url       String
  fileType  String
  fileName  String
  meta      String?
  timestamp DateTime @default(now()) @db.Timestamp(0)

  issue   Issue   @relation(fields: [issueId], references: [id])
  issueId Int
  Media   Media[] @relation("IssuesMediaRelation")

  @@index([issueId])
}

model GenericMedia {
  id        String   @id @default(cuid())
  key       String
  url       String
  fileType  String
  fileName  String
  meta      String?
  timestamp DateTime @default(now()) @db.Timestamp(0)
  Media     Media[]  @relation("GenericMediaRelation")
}

enum ComponentCategory {
  BASE
  ATOMS
  MOLECULES
  ORGANISMS
}

model Component {
  id          String            @id @default(cuid())
  notion_id   String?           @unique
  name        String
  category    ComponentCategory
  description String?
  Issue       Issue[]
}

model GuildRole {
  id               String  @id
  name             String
  isAutoAssignable Boolean @default(false)
  lab              Lab?
}

model Lab {
  id          String  @id @default(cuid())
  name        String
  displayName String?
  channelId   String? @unique
  channelName String? @unique

  GuildRole    GuildRole?     @relation(fields: [guildRoleId], references: [id])
  guildRoleId  String?        @unique
  LabGuildUser LabGuildUser[]
  Issue        Issue[]
  GuildUser    GuildUser[]
}

model LabGuildUser {
  Lab         Lab       @relation(fields: [labId], references: [id])
  labId       String
  GuildUser   GuildUser @relation(fields: [guildUserId], references: [id])
  guildUserId String

  @@id([labId, guildUserId])
}
